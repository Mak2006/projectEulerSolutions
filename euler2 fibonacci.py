# Euler problem # 2
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


# Solved initially using jupyter, here is the py version

# Max num
import pandas as pd




def getFibonaci(limit):
    s = pd.Series([1, 2])  # has the first two
    for i in range(limit):
        length = len(s)
        # print(length)
        j = s[length - 1] + s[length - 2]
        if j > limit:
            return s
        else:
            s[length] = j
    return s

if __name__ == '__main__':

    ser = getFibonaci(4000000)

    # Get the sum of all the numbers
    sereven = ser.apply(lambda x: x if x % 2 == 0 else 0)  # save only those whic are even

    print(sereven)
    # Get the sum
    print(sereven.sum())





